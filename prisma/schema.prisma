// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
 
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?
  isAdmin   Boolean  @default(false) // Fixed typo
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Product {
  id          String         @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  sizes       ProductSize[]
  isFeatured  Boolean        @default(false)
  categoryId  String
    category    Category        @relation("CategoryProducts", fields: [categoryId], references: [id])
  images      Image[]
  variants    ProductVariant[]
  orderId     String?        // Changed to optional
  orders      OrderProduct[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ProductVariant {
  id        String   @id @default(uuid())
  name      String
  price     Float
  stock     Int
  color     String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductSize {
  id        String   @id @default(uuid())
  size      String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique

  products  Product[]  @relation("CategoryProducts")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Image {
  id        String   @id @default(cuid())
  imageUrl       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id         String        @id @default(cuid())
  customerId String
  customer   Customer      @relation(fields: [customerId], references: [id])
  products   OrderProduct[]
  total      Float
  status     String        @default("Pending")
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model OrderProduct {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}


